{"version":3,"sources":["Components/home.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","initialState","parentname","parentnameError","parentcontactno","parentcontactnoError","parentemail","parentemailError","childname","childnameError","childage","childageError","coursename","coursedate","coursetime","coursedata","slotdata","slots","dates","ITEM_HEIGHT","ITEM_PADDING_TOP","MenuProps","PaperProps","style","maxHeight","width","handleParentName","input","event","setState","target","value","length","handlePhoneNo","test","handleEmail","includes","handleChildName","handleChildAge","handleCourseName","key","state","course_name","handleCourseDate","tempslots","slot","num","slotdate","Date","currentdate","getDate","date","getMonth","fullformatdate","getFullYear","year","getHours","getMinutes","push","changetimeformat","handleCourseTime","getCourseData","setslotdates","axios","get","then","response","console","log","data","catch","err","dt","months","i","dtobj","month","this","setDate","newformatslots","newslot","starthour","startmin","startampm","endhour","endmin","endampm","validate","window","location","reload","alert","className","TextField","label","placeholder","error","helperText","onChange","type","FormControl","InputLabel","Select","labelId","MenuItem","map","course","Button","color","variant","onClick","submit","bind","margin","Component","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eae6bb33.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport axios from 'axios';\r\nimport './home.css'\r\n\r\nclass Home extends Component {\r\n\r\n    initialState = {\r\n        //fields to store the form data and errors\r\n        parentname: '',\r\n        parentnameError: '',\r\n        parentcontactno: '',\r\n        parentcontactnoError: '',\r\n        parentemail: '',\r\n        parentemailError: '',\r\n        childname: '',\r\n        childnameError: '',\r\n        childage: '',\r\n        childageError: '',\r\n        coursename: '',\r\n        coursedate: '',\r\n        coursetime: '',\r\n        coursedata: [],\r\n        slotdata: [],\r\n        slots: []\r\n    }\r\n\r\n    //store seven dates from the current time\r\n    dates = [];\r\n\r\n    //Menuprops is passed to dropdown in order to control its max-height(material-ui react)\r\n    ITEM_HEIGHT = 48;\r\n    ITEM_PADDING_TOP = 8;\r\n    MenuProps = {\r\n        PaperProps: {\r\n            style: {\r\n                maxHeight: this.ITEM_HEIGHT * 4.5 + this.ITEM_PADDING_TOP,\r\n                width: 250,\r\n            },\r\n        },\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.initialState;\r\n        this.getCourseData();\r\n        this.setslotdates();\r\n    }\r\n\r\n    //fetching all the details of the courses\r\n    getCourseData() {\r\n        axios.get('https://script.google.com/macros/s/AKfycbzJ8Nn2ytbGO8QOkGU1kfU9q50RjDHje4Ysphyesyh-osS76wep/exec')\r\n            .then(response => {\r\n                console.log(response)\r\n                if (response.data) {\r\n                    this.setState({ coursedata: response.data })\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n    //set the list of available dates to choose from\r\n    setslotdates() {\r\n        var dt = new Date();\r\n        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n        for (let i = 0; i < 7; i++) {\r\n            let dtobj = {\r\n                date: dt.getDate(),\r\n                month: months[dt.getMonth()],\r\n                year: dt.getFullYear(),\r\n                fullformatdate: dt\r\n            }\r\n            this.dates.push(dtobj);\r\n            dt.setDate(dt.getDate() + 1);\r\n        }\r\n    }\r\n\r\n    //handle the submit disable by checking all the validations\r\n    validate() {\r\n        if (this.state.parentname.length >= 4 && this.state.childname.length >= 4\r\n            && /^[6-9]\\d{9}$/i.test(this.state.parentcontactno) && this.state.parentemail.includes('@')\r\n            && (this.state.childage >= 2 && this.state.childage <= 50) && (this.state.coursename\r\n                && this.state.coursedate && this.state.coursetime)) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    //handle the name validations\r\n    handleParentName = input => event => {\r\n        this.setState({ parentname: event.target.value });\r\n        if (event.target.value.length < 4) {\r\n            this.setState({ parentnameError: 'Name atleast 4 characters' })\r\n        }\r\n        else {\r\n            this.setState({ parentnameError: '' })\r\n        }\r\n\r\n    }\r\n\r\n    //handle the validation for mobile number format\r\n    handlePhoneNo = input => event => {\r\n        this.setState({ parentcontactno: event.target.value });\r\n        if (!/^[6-9]\\d{9}$/i.test(event.target.value)) {\r\n            this.setState({ parentcontactnoError: 'Phone No format incorrect' })\r\n        }\r\n        else {\r\n            this.setState({ parentcontactnoError: '' })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //handle Email Validations\r\n    handleEmail = input => event => {\r\n        this.setState({ parentemail: event.target.value });\r\n        if (!event.target.value.includes('@')) {\r\n            this.setState({ parentemailError: 'Email should be proper' })\r\n        }\r\n        else {\r\n            this.setState({ parentemailError: '' })\r\n        }\r\n\r\n    }\r\n\r\n    handleChildName = input => event => {\r\n        this.setState({ childname: event.target.value });\r\n        if (event.target.value.length < 4) {\r\n            this.setState({ childnameError: 'Name atleast 4 characters' })\r\n        }\r\n        else {\r\n            this.setState({ childnameError: '' })\r\n        }\r\n\r\n    }\r\n\r\n    //handle the validation for child's age\r\n    handleChildAge = input => event => {\r\n        this.setState({ childage: event.target.value });\r\n        //console.log(typeof((event.target.value-0)))\r\n        if ((event.target.value < 2 || event.target.value > 50)) {\r\n            this.setState({ childageError: 'Age should be between 2 to 50' })\r\n        }\r\n        else {\r\n            this.setState({ childageError: '' })\r\n        }\r\n\r\n    }\r\n\r\n    handleCourseName = input => event => {\r\n        this.setState({ coursename: event.target.value, coursedate: '', slots: [], coursetime: '' });\r\n\r\n        //set the slotdata to the slots of the course which was chosen\r\n        for (let key in this.state.coursedata) {\r\n            if (this.state.coursedata[key].course_name == event.target.value) {\r\n                this.setState({ slotdata: this.state.coursedata[key].slots });\r\n            }\r\n        }\r\n    }\r\n\r\n    handleCourseDate = input => event => {\r\n        this.setState({ coursedate: event.target.value, slots: [], coursetime: '' });\r\n        //set the timing slot based on the date chosen\r\n        //if current date is chosen then set the 4hrs limit\r\n        var tempslots = [];\r\n        for (let slot of this.state.slotdata) {\r\n            if (slot) {\r\n                let num = slot.slot - 0;\r\n                let slotdate = new Date(num);\r\n                let coursedate = event.target.value;\r\n                let currentdate = new Date();\r\n                //console.log(slotdate,coursedate,currentdate);\r\n                if (slotdate.getDate() == coursedate.date &&\r\n                    slotdate.getMonth() == coursedate.fullformatdate.getMonth()\r\n                    && slotdate.getFullYear() == coursedate.year) {\r\n                    if (slotdate.getDate() == currentdate.getDate() &&\r\n                        (slotdate.getHours() * 60 + slotdate.getMinutes() -\r\n                            currentdate.getHours() * 60 - currentdate.getMinutes() < 240)) {\r\n\r\n                    }\r\n                    else {\r\n                        tempslots.push(slotdate);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (tempslots) {\r\n            this.changetimeformat(tempslots);\r\n        }\r\n\r\n    }\r\n\r\n    //change the timeformat of slots from 24hrs format to am-pm format\r\n    //and define the end timing of the slots as well\r\n    changetimeformat(tempslots) {\r\n        var newformatslots = [];\r\n        for (let slot of tempslots) {\r\n            let newslot = {\r\n                starthour: 0,\r\n                startmin: 0,\r\n                startampm: '',\r\n                endhour: 1,\r\n                endmin: 0,\r\n                endampm: ''\r\n            }\r\n\r\n            newslot.starthour = slot.getHours();\r\n            newslot.startmin = slot.getMinutes();\r\n            newslot.startampm = (newslot.starthour >= 12) ? 'P.M' : 'A.M';\r\n            newslot.endhour = slot.getHours() + 1;\r\n            newslot.endmin = slot.getMinutes();\r\n            newslot.endampm = (newslot.endhour >= 12) ? 'P.M' : 'A.M';\r\n\r\n            newslot.starthour = (newslot.starthour > 12) ? newslot.starthour - 12 : newslot.starthour;\r\n            newslot.starthour = (newslot.starthour == 0) ? 12 : newslot.starthour;\r\n\r\n            newslot.endhour = (newslot.endhour > 12) ? newslot.endhour - 12 : newslot.endhour;\r\n            newslot.endhour = (newslot.endhour == 0) ? 12 : newslot.endhour;\r\n\r\n            newslot.starthour = (newslot.starthour < 10) ? ('0' + newslot.starthour) : '' + newslot.starthour;\r\n            newslot.endhour = (newslot.endhour < 10) ? ('0' + newslot.endhour) : '' + newslot.endhour;\r\n\r\n            newslot.startmin = (newslot.startmin < 10) ? ('0' + newslot.startmin) : '' + newslot.startmin;\r\n            newslot.endmin = (newslot.endmin < 10) ? ('0' + newslot.endmin) : '' + newslot.endmin;\r\n\r\n            newformatslots.push(newslot);\r\n        }\r\n        this.setState({ slots: newformatslots });\r\n    }\r\n\r\n\r\n    handleCourseTime = input => event => {\r\n        this.setState({ coursetime: event.target.value });\r\n\r\n    }\r\n\r\n    submit() {\r\n        //send state to backend\r\n        if (this.validate()) {\r\n            //alert('Form Data Valid')\r\n            window.location.reload();\r\n        }\r\n        else {\r\n            alert('Form Data Invalid')\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div><h3>Please Fill the given form</h3></div>\r\n                <div>\r\n                    <div className={'eachel'}>\r\n                        <TextField style={{ width: '100%' }}\r\n                            label=\"Parent Name\"\r\n                            placeholder=\"Enter Parent's Name\"\r\n                            error={this.state.parentnameError ? true : false}\r\n                            className=\"inputField\"\r\n                            helperText={this.state.parentnameError}\r\n                            onChange={this.handleParentName('parentname')}\r\n                        />\r\n                        <br />\r\n                    </div>\r\n                    <div className={'eachel'}>\r\n                        <TextField style={{ width: '100%' }}\r\n                            placeholder=\"Enter 10 digit mobile no\"\r\n                            label=\"Parent Mobile No\"\r\n                            error={this.state.parentcontactnoError ? true : false}\r\n                            className=\"inputField\"\r\n                            helperText={this.state.parentcontactnoError}\r\n                            onChange={this.handlePhoneNo('phoneno')}\r\n                        />\r\n                        <br />\r\n                    </div>\r\n                    <div className={'eachel'}>\r\n                        <TextField style={{ width: '100%' }}\r\n                            placeholder=\"Enter Parent's Email\"\r\n                            label=\"Parent Email\"\r\n                            error={this.state.parentemailError ? true : false}\r\n                            className=\"inputField\"\r\n                            helperText={this.state.parentemailError}\r\n                            onChange={this.handleEmail('parentemail')}\r\n                        />\r\n                        <br />\r\n                    </div>\r\n                    <div className={'eachel'}>\r\n                        <TextField style={{ width: '100%' }}\r\n                            label=\"Child's Name\"\r\n                            placeholder=\"Enter Child's Name\"\r\n                            error={this.state.childnameError ? true : false}\r\n                            className=\"inputField\"\r\n                            helperText={this.state.childnameError}\r\n                            onChange={this.handleChildName('childname')}\r\n                        />\r\n                        <br />\r\n                    </div>\r\n                    <div className={'eachel'}>\r\n                        <TextField style={{ width: '100%' }}\r\n                            label=\"Child's Age\"\r\n                            placeholder=\"Enter Child's Age\"\r\n                            type=\"number\"\r\n                            error={this.state.childageError ? true : false}\r\n                            className=\"inputField\"\r\n                            helperText={this.state.childageError}\r\n                            onChange={this.handleChildAge('childage')}\r\n                        />\r\n                        <br />\r\n                    </div>\r\n                    <div className={'eachel'}>\r\n                        <FormControl className=\"dropdown\">\r\n                            <InputLabel>Select Course</InputLabel>\r\n                            <Select\r\n                                MenuProps={this.MenuProps}\r\n                                value={this.state.coursename || ''}\r\n                                labelId=\"demo-simple-select-label\"\r\n                                onChange={this.handleCourseName('coursename')}\r\n                            >\r\n                                {(this.state.coursedata.length != 0) ? null : <MenuItem>Fetching Courses</MenuItem>}\r\n                                {this.state.coursedata.map((course, i) => (\r\n                                    <MenuItem value={course.course_name} key={i}>{course.course_name}</MenuItem>\r\n                                ))}\r\n\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                    <div className={'eachel'}>\r\n                        <FormControl className=\"dropdown\">\r\n                            <InputLabel>Select Date</InputLabel>\r\n                            <Select\r\n                                MenuProps={this.MenuProps}\r\n                                value={this.state.coursedate || ''}\r\n                                labelId=\"demo-simple-select-label\"\r\n                                onChange={this.handleCourseDate('coursedate')}\r\n                            >\r\n                                {this.dates.map((date, i) => (\r\n                                    <MenuItem value={date} key={i}>{date.date} {date.month}</MenuItem>\r\n                                ))}\r\n\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                    <div className={'eachel'}>\r\n                        <FormControl className=\"dropdown\">\r\n                            <InputLabel>Select Slot Timing</InputLabel>\r\n                            <Select\r\n                                MenuProps={this.MenuProps}\r\n                                value={this.state.coursetime || ''}\r\n                                labelId=\"demo-simple-select-label\"\r\n                                onChange={this.handleCourseTime('coursedate')}\r\n                            >\r\n                                {(this.state.slots.length != 0) ? null : <MenuItem>No Slots Available</MenuItem>}\r\n                                {this.state.slots.map((slot, i) => (\r\n                                    <MenuItem value={slot} key={i}>{slot.starthour} : {slot.startmin} {slot.startampm} to {slot.endhour} : {slot.endmin} {slot.endampm}</MenuItem>\r\n                                ))}\r\n\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n\r\n                    <Button color=\"primary\" variant=\"contained\" onClick={this.submit.bind(this)}\r\n                        style={{ margin: '20px' }}>\r\n                        Submit\r\n                </Button>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\nimport './App.css';\nimport Home from './Components/home'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <div >\n       <Home/>\n     </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}